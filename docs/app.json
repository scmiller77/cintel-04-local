[{"name": "app.py", "content": "\nimport plotly.express as px\nimport seaborn as sns\nfrom shiny.express import input, ui\nfrom shiny import render, reactive, req\nfrom shinywidgets import render_plotly, render_widget\nimport palmerpenguins\n\npenguins = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Smiller's Penguin Report\", fillable=True)\n\n\n@reactive.calc\ndef filtered_data():\n    # The required function req() is used to ensure that\n    # the input.selected_species_list() function is not empty.\n    req(input.selected_species_list())\n\n    # If empty, req() will stop the execution and\n    # we'll just wait until the associated input changes to not empty.\n    # If not empty, we'll continue and filter the data.\n    isSpeciesMatch = penguins[\"species\"].isin(input.selected_species_list())\n\n    return penguins[isSpeciesMatch]\n\n\nwith ui.sidebar(open=\"open\"):\n    # Add a second-level header to the sidebar\n    ui.h2(\"Sidebar\")\n\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Choose Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Histogram Bins\", 25)\n\n    # Slider input for the number of Seaborn bins\n    ui.input_slider(\n        \"seaborn_bin_count\", \"Seaborn Bins\", 1, 60, 30\n    )  # Minimum, maximum, default values\n\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Filter Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\"],\n        inline=True,\n    )  # Selected options and inline display\n\n    # Add a horizontal rule\n    ui.hr()\n\n    # Add a hyperlink\n    ui.a(\"GitHub\", href=\"https://github.com/scmiller77\", target=\"_blank\")\n\nwith ui.layout_columns():\n    with ui.card():\n\n        @render.data_frame\n        def penguins_df():\n            return render.DataTable(penguins)\n\n    with ui.card():\n\n        @render.data_frame\n        def penguins_dg():\n            return render.DataGrid(penguins)\n\n\nwith ui.layout_columns():\n\n    @render_widget\n    def plot1():\n        scatterplot = px.histogram(\n            data_frame=filtered_data(),\n            x=input.selected_attribute(),\n            nbins=input.plotly_bin_count(),\n            color=\"species\",\n        ).update_layout(\n            title={\"text\": \"Palmer Penguins - Plotly\", \"x\": 0.5},\n            yaxis_title=\"Value\",\n        )\n        return scatterplot\n\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")\n    def plot2():\n        ax = sns.histplot(\n            data=filtered_data(),\n            x=input.selected_attribute(),\n            hue=\"species\",\n            bins=input.seaborn_bin_count(),\n        )\n        ax.set_title(\"Palmer Penguins - Seaborn\")\n        ax.set_ylabel(\"Value\")\n        return ax\n\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(\n            filtered_data(),\n            x=\"bill_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            title=\"Palmer Penguins - Plotly Scatterplot\",\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\",\n            },\n            size_max=8,  # set the maximum marker size\n        )\n", "type": "text"}]